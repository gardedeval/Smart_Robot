package com.example.systemlabs1.test;

import android.os.AsyncTask;
import android.os.Bundle;
import android.app.Activity;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.widget.TextView;
import java.io.*;
import java.util.Properties;
import com.jcraft.jsch.*;

public  class MainActivity extends Activity implements SensorEventListener {

    private TextView text;
    private SensorManager mSensorManager;
    private Sensor mAccelerometer;
    private Sensor mMagnetometer;
    private float[] mLastAccelerometer = new float[3];
    private float[] mLastMagnetometer = new float[3];
    private boolean mLastAccelerometerSet = false;
    private boolean mLastMagnetometerSet = false;
    private float[] mR = new float[9];
    private float[] mOrientation = new float[3];
    private static long counter = 0L;
    private float mCurrentDegree = 0f;
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        mSensorManager = (SensorManager)getSystemService(SENSOR_SERVICE);
        mAccelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        mMagnetometer = mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
        text = (TextView) findViewById(R.id.text);
    }

    @Override
    protected void onResume() {
        super.onResume();
        mSensorManager.registerListener(this, mAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);
        mSensorManager.registerListener(this, mMagnetometer, SensorManager.SENSOR_DELAY_NORMAL);
    }

    @Override
    protected void onPause() {
        super.onPause();
        mSensorManager.unregisterListener(this, mAccelerometer);
        mSensorManager.unregisterListener(this, mMagnetometer);
    }

    public void onAccuracyChanged(Sensor sensor, int accuracy) {
        //do nothing
    }

    public void onSensorChanged(SensorEvent event) {
        String angle = "";
        counter++;
        if (event.sensor == mAccelerometer) {
            System.arraycopy(event.values, 0, mLastAccelerometer, 0, event.values.length);
            mLastAccelerometerSet = true;
        } else if (event.sensor == mMagnetometer) {
            System.arraycopy(event.values, 0, mLastMagnetometer, 0, event.values.length);
            mLastMagnetometerSet = true;
        }
        if (mLastAccelerometerSet && mLastMagnetometerSet) {
            SensorManager.getRotationMatrix(mR, null, mLastAccelerometer, mLastMagnetometer);
            SensorManager.getOrientation(mR, mOrientation);
            float azimuthInRadians = mOrientation[0];
            int azimuthInDegress = (int)(Math.toDegrees(azimuthInRadians) + 360) % 360;
            Integer d = ((Integer) azimuthInDegress);
            text.setText(d.toString());
            angle = d.toString();
            text.invalidate();

            if(counter > 10) {
                new DevalWorker().execute(angle);
                counter = 0;
            }

        }


    }



    protected class DevalWorker extends AsyncTask<String, Integer, String>
    {

        @Override
        protected String doInBackground(String... params) {
            try {
                JSch jsch = new JSch();
                Session session = jsch.getSession("pi", "10.2.2.132", 22);
                session.setPassword("raspberry");

                // Avoid asking for key confirmation
                Properties prop = new Properties();
                prop.put("StrictHostKeyChecking", "no");
                session.setConfig(prop);

                session.connect();

                // SSH Channel
                ChannelExec channelssh = (ChannelExec)
                        session.openChannel("exec");
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                channelssh.setOutputStream(baos);

                // Execute command
                String command = "echo "+params[0] + " >> "+"abc.txt";
                System.out.println("Angle" + params[0]);
                channelssh.setCommand(command);
                channelssh.connect();
                channelssh.disconnect();
            }
            catch (Exception e)
            {
                //JSchException temp = (JSchException)e;
                System.out.println("Error Jsch" + e.getMessage());
            }
            return null;
        }
    }
}
